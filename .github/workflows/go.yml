name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      TZ: "America/Winnipeg"
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: install golangci-lint and goveralls
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $GITHUB_WORKSPACE v1.23.8
          go get -u github.com/mattn/goveralls

      - name: lint
        run: $GITHUB_WORKSPACE/golangci-lint --config ${GITHUB_WORKSPACE}/.golangci.yml run  ./...

      - name: test
        run: go test -race -timeout=30s -covermode=atomic -coverprofile=$GITHUB_WORKSPACE/profile.cov ./...

      - name: submit coverage
        run: $(go env GOPATH)/bin/goveralls -service="github" -coverprofile=$GITHUB_WORKSPACE/profile.cov
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_deploy:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    env:
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      DEV_LAMBDA_FUNCTION: ${{ secrets.DEV_LAMBDA_FUNCTION }}
    steps:
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Build
      run: go build -v .

    - name: Zip
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq function.zip feederBot settings.toml

    - name: Push Template to S3
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Copy files to S3 with the AWS CLI
      run: |
        aws s3 cp function.zip s3://${AWS_S3_BUCKET}/${GITHUB_RUN_NUMBER}/
        aws s3 sync s3://${AWS_S3_BUCKET}/${GITHUB_RUN_NUMBER} s3://${AWS_S3_BUCKET}/latest --delete

    - name: Update function code
      run: |
        aws s3 cp function.zip s3://${AWS_S3_BUCKET}/${GITHUB_RUN_NUMBER}/
        aws lambda update-function-code --function-name ${DEV_LAMBDA_FUNCTION} --s3-bucket s3://${AWS_S3_BUCKET}/latest/function.zip
